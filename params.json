{"name":"Geolocation-python","tagline":"Geolocation is a simple and clever application which uses google maps api. This application allows you to easily and quickly get information about given location Application returns such information as: country, city, route/street, street number, lat and lng, travel distance and time for a matrix of origins and destinations.","body":"What is Geolocation 0.2.0?\r\n=====================\r\n![Alt text](https://travis-ci.org/iknowledge-io/geolocation-python.svg?branch=master)&nbsp;&nbsp;&nbsp;[![PyPI version](https://badge.fury.io/py/geolocation-python.svg)](https://pypi.python.org/pypi/geolocation-python/0.2.0)&nbsp;&nbsp;&nbsp;\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/slawek87/geolocation-python?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nGeolocation is a simple and clever application which uses google maps api.\r\n\r\n1. Geocode Module allows you to easily and quickly get information about given location.\r\n\r\nGeocode Module returns such information as: \r\n* country, \r\n* country short form,\r\n* city, \r\n* route/street, \r\n* street number,\r\n* postal code,\r\n* formatted address,\r\n* administrative areas,\r\n* lat,\r\n* lng.\r\n\r\n2. Distance Module allows you to get information about travel distance and time for a matrix of origins and destinations.\r\n\r\nDistance Module returns such information as:\r\n* origin address\r\n* destination address\r\n* duration\r\n* distance\r\n    - kilometers\r\n    - meters\r\n    - miles\r\n\r\nPython2 or Python3?\r\n-------------------\r\nBoth!. Currently it supports python 2.7, 3.3 and 3.4.\r\n\r\nWhat do You need?\r\n-----------------\r\nTo use this application you need to have Google API key.\r\n    [Google Maps Documentation](https://developers.google.com/maps/documentation/geocoding/) -- Geocoding\r\n\r\n1. Open [APIs console](https://code.google.com/apis/console).\r\n\r\n  ![Alt text](https://github.com/iknowledge-io/geolocation-python/blob/geolocation-0.2.0/docs/images/geocode-1.png?raw=true \"APIs console\")\r\n\r\n2. Turn On Geocode API.\r\n\r\n  ![Alt text](https://github.com/iknowledge-io/geolocation-python/blob/geolocation-0.2.0/docs/images/geocode-2.png?raw=true \"Geocode Api\")\r\n\r\n3. Turn On Distance Matrix API.\r\n\r\n  ![Alt text](https://github.com/iknowledge-io/geolocation-python/blob/geolocation-0.2.0/docs/images/distance-1.png?raw=true \"Distance Matrix Api\")\r\n  \r\n4. Get your API Key.\r\n\r\n  ![Alt text](https://github.com/iknowledge-io/geolocation-python/blob/geolocation-0.2.0/docs/images/geocode-3.png?raw=true \"API KEY\")\r\n\r\n\r\nHow to install it?\r\n-------------------\r\n    pip install geolocation-python\r\n\r\n\r\nHow to use Geocode Module?\r\n----------------------------\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom geolocation.google_maps import GoogleMaps\r\n\r\naddress = \"New York City Wall Street 12\"\r\n\r\ngoogle_maps = GoogleMaps(api_key='your_google_maps_key') \r\n\r\nlocation = google_maps.search(location=address) # sends search to Google Maps.\r\n\r\nprint(location.all()) # returns all locations.\r\n\r\nmy_location = location.first() # returns only first location.\r\n\r\nprint(my_location.city)\r\nprint(my_location.route)\r\nprint(my_location.street_number)\r\nprint(my_location.postal_code)\r\n\r\nfor administrative_area in my_location.administrative_area:\r\n    print(\"{}: {}\".format(administrative_area.area_type, administrative_area.name))\r\n\r\nprint(my_location.country)\r\nprint(my_location.country_shortcut)\r\n\r\nprint(my_location.formatted_address)\r\n\r\nprint(my_location.lat)\r\nprint(my_location.lng)\r\n\r\n# reverse geocode\r\n\r\nlat = 40.7060008\r\nlng = -74.0088189\r\n\r\nmy_location = google_maps.search(lat=lat, lng=lng).first()\r\n\r\n```\r\n\r\nHow to use Distance Module?\r\n----------------------------\r\nMode parameter â€” specifies the mode of transport to use when calculating directions. \r\n\r\nValid values are:\r\n* driving (default) indicates standard driving directions using the road network.\r\n* walking requests walking directions via pedestrian paths & sidewalks (where available).\r\n* bicycling requests bicycling directions via bicycle paths & preferred streets (currently only available in the US and some Canadian cities).\r\n\r\nAvoid parameter -  Directions may be calculated that adhere to certain restrictions. Restrictions are indicated by use of the avoid parameter, and an argument to that parameter indicating the restriction to avoid.\r\n\r\nThe following estrictions are supported:\r\n* avoid=tolls\r\n* avoid=highways\r\n* avoid=ferries\r\n    \r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom geolocation.google_maps import GoogleMaps\r\nfrom geolocation.distance_matrix import const\r\n\r\norigins = ['rybnik', 'oslo']\r\ndestinations = ['zagrzeb']\r\n\r\ngoogle_maps = GoogleMaps(api_key='your_google_maps_key')\r\n\r\nitems = google_maps.distance(origins, destinations).all()  # default mode parameter is const.MODE_DRIVING.\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration  # returns string.\r\n    print 'duration datetime: %s' % item.duration.datetime  # returns datetime.\r\n    \r\n    # you can also get items from duration, returns int() values.\r\n    print 'duration days: %s' % item.duration.days\r\n    print 'duration hours: %s' % item.duration.hours\r\n    print 'duration minutes: %s' % item.duration.minutes\r\n    print 'duration seconds: %s' % item.duration.seconds\r\n```\r\n\r\nMode Bicycling:\r\n```python\r\nitems = google_maps.distance(origins, destinations, const.MODE_BICYCLING).all()\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration\r\n```\r\n\r\nMode Walking:\r\n```python\r\nitems = google_maps.distance(origins, destinations, const.MODE_WALKING).all()\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration\r\n```\r\n\r\nMode Highway:\r\n```python\r\nitems = google_maps.distance(origins, destinations, avoid=const.AVOID_HIGHWAYS).all()\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration\r\n```\r\n\r\nAvoid Ferries:\r\n```python\r\nitems = google_maps.distance(origins, destinations, avoid=const.AVOID_FERRIES).all()\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration\r\n```\r\n\r\nAvoid Tolls:\r\n```python\r\nitems = google_maps.distance(origins, destinations, avoid=const.AVOID_TOLLS).all()\r\n\r\nfor item in items:\r\n    print 'origin: %s' % item.origin\r\n    print 'destination: %s' % item.destination\r\n    print 'km: %s' % item.distance.kilometers\r\n    print 'm: %s' % item.distance.meters\r\n    print 'miles: %s' % item.distance.miles\r\n    print 'duration: %s' % item.duration\r\n```\r\n\r\nMore examples you should find [here](https://github.com/iknowledge-io/geolocation-python/tree/master/examples).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}